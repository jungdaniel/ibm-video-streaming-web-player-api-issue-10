{"version":3,"sources":["MediaPlayer.js","index.js"],"names":["MediaPlayer","id","src","thumbnail","playerRef","useRef","useState","viewer","setViewer","playerContentAvailable","setPlayerContentAvailable","rootUrl","encodeURIComponent","window","location","origin","srcUpdated","useEffect","current","onError","event","name","message","Error","onContentAvailable","data","v","PlayerAPI","addListener","removeListener","error","style","width","height","margin","position","ref","title","allowFullScreen","frameBorder","sandbox","inset","zIndex","objectFit","alt","paddingTop","onClick","callMethod","disabled","ReactDOM","render","document","getElementById"],"mappings":"gOA2FeA,EAxFK,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,UACxBC,EAAYC,iBAAO,MADqB,EAElBC,oBAAS,GAFS,mBAEvCC,EAFuC,KAE/BC,EAF+B,OAGcF,oBAAS,GAHvB,mBAGvCG,EAHuC,KAGfC,EAHe,KAKxCC,EAAUC,mBAAmBC,OAAOC,SAASC,QAC7CC,EAAad,EAAG,UACfA,EADe,8BACUS,EADV,mDAElB,GAEJM,qBAAU,WACR,IAAK,IAAD,EACF,IAAKb,EAAUc,QACb,OAGF,IAAMC,EAAU,SAACC,GAAW,IAClBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QACd,OAAQD,GACN,IAAK,mBACH,MAAM,IAAIE,MAAMD,KAKhBE,EAAqB,SAACC,GACb,qBAATA,GACFf,GAA0B,IAIxBgB,EAAIC,YAAS,UAACvB,EAAUc,eAAX,aAAC,EAAmBjB,IAMvC,OALAyB,EAAEE,YAAY,mBAAoBJ,GAClCE,EAAEE,YAAY,QAAST,GAEvBX,EAAUkB,GAEH,WACLA,EAAEG,eAAe,mBAAoBL,GACrCE,EAAEG,eAAe,QAASV,IAE5B,MAAOW,GACP,MAAM,IAAIP,MAAMO,EAAMR,YAEvB,CAAClB,IAKJ,OAAKF,EAKH,sBAAK6B,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,OAAQ,GAAIC,SAAU,YAA7D,UACE,wBACEC,IAAKhC,EACLH,GAAIA,EACJoC,MAAOpC,EACPC,IAAKc,EACLsB,iBAAiB,EACjBC,YAAY,IACZC,QAAQ,mGACRR,MAAM,QACNC,OAAO,UAET,qBAAKF,MAAO,CAAEI,SAAU,WAAYM,MAAO,EAAGC,QAAS,GAAvD,SACE,qBACEX,MAAO,CAAEY,UAAW,QAASX,MAAO,OAAQC,OAAQ,QACpD/B,IAAKC,EACLyC,IAAI,OAGR,4BACGnC,EAAyB,uBAAyB,eAErD,sBAAKsB,MAAO,CAAEc,WAAY,IAA1B,UACE,wBAAQC,QA/BC,+BAAMvC,QAAN,IAAMA,GAAN,UAAMA,EAAQwC,kBAAd,aAAM,OAAAxC,EAAqB,SA+BXyC,UAAWvC,EAApC,kBAGA,wBAAQqC,QAjCE,+BAAMvC,QAAN,IAAMA,GAAN,UAAMA,EAAQwC,kBAAd,aAAM,OAAAxC,EAAqB,UAiCXyC,UAAWvC,EAArC,yBA9BG,MCjDXwC,IAASC,OACP,cAAC,EAAD,CACEjD,GAAG,WACHE,UAAU,+CACVD,IAAI,mDAENiD,SAASC,eAAe,W","file":"static/js/main.c4475687.chunk.js","sourcesContent":["import PlayerAPI from 'ibm-video-streaming-web-player-api';\nimport React, { useEffect, useRef, useState } from 'react';\n\nconst MediaPlayer = ({ id, src, thumbnail }) => {\n  const playerRef = useRef(null);\n  const [viewer, setViewer] = useState(false);\n  const [playerContentAvailable, setPlayerContentAvailable] = useState(false);\n\n  const rootUrl = encodeURIComponent(window.location.origin);\n  const srcUpdated = src\n    ? `${src}?api-target-origin=${rootUrl}&showtitle=true&allowfullscreen=false&volume=50`\n    : '';\n\n  useEffect(() => {\n    try {\n      if (!playerRef.current) {\n        return;\n      }\n\n      const onError = (event) => {\n        const { name, message } = event;\n        switch (name) {\n          case 'autoplayRejected':\n            throw new Error(message);\n          // no default\n        }\n      };\n\n      const onContentAvailable = (data) => {\n        if (data === 'contentAvailable') {\n          setPlayerContentAvailable(true);\n        }\n      };\n\n      const v = PlayerAPI(playerRef.current?.id);\n      v.addListener('contentAvailable', onContentAvailable);\n      v.addListener('error', onError);\n\n      setViewer(v);\n\n      return () => {\n        v.removeListener('contentAvailable', onContentAvailable);\n        v.removeListener('error', onError);\n      };\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }, [playerRef]);\n\n  const onPlay = () => viewer?.callMethod?.('play');\n  const onPause = () => viewer?.callMethod?.('pause');\n\n  if (!src) {\n    return null;\n  }\n\n  return (\n    <div style={{ width: 800, height: 450, margin: 40, position: 'relative' }}>\n      <iframe\n        ref={playerRef}\n        id={id}\n        title={id}\n        src={srcUpdated}\n        allowFullScreen={false}\n        frameBorder='0'\n        sandbox='allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation-by-user-activation'\n        width='800px'\n        height='450px'\n      />\n      <div style={{ position: 'absolute', inset: 0, zIndex: -1 }}>\n        <img\n          style={{ objectFit: 'cover', width: '100%', height: '100%', }}\n          src={thumbnail}\n          alt=''\n        />\n      </div>\n      <p>\n        {playerContentAvailable ? 'content is available' : 'loading...'}\n      </p>\n      <div style={{ paddingTop: 10 }}>\n        <button onClick={onPlay} disabled={!playerContentAvailable}>\n          play\n        </button>\n        <button onClick={onPause} disabled={!playerContentAvailable}>\n          pause\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default MediaPlayer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MediaPlayer from './MediaPlayer';\n\nReactDOM.render(\n  <MediaPlayer\n    id=\"issue-10\"\n    thumbnail=\"https://place-hold.it/1080x720?text=ISSUE_10\"\n    src=\"https://video.ibm.com/embed/recorded/130908580\"\n  />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}